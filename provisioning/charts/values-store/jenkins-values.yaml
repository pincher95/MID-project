master:
  authorizationStrategy: |-
     <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
       <denyAnonymousReadAccess>false</denyAnonymousReadAccess>
     </authorizationStrategy>
  adminPassword: admin
  resources:
    limits:
      cpu: "1000m"
      memory: "1096Mi"
  #javaOpts: "-Djavamelody.plugin-authentication-disabled=true"
  serviceType: NodePort
  nodePort: 32323
  serviceAnnotations: {
    consul.hashicorp.com/service-tags: jenkins-metrics
  }
  podLabels: { consul.hashicorp.com/service-tags: jenkins }
  installPlugins:
    - kubernetes:1.24.1
    - kubernetes-cd:2.1.2
    - kubernetes-credentials:0.6.2
    - workflow-job:2.35
    - workflow-aggregator:2.6
    - credentials-binding:1.20
    - git:4.2.2
    - greenballs:1.15
    - ssh-slaves:1.30.4
    - authentication-tokens:1.3
    - docker-workflow:1.20
    - rebuild:1.31
    - ssh-agent:1.17
    - prometheus:2.0.6
    - kubernetes-cli:1.8.2

  initScripts:
    pipeline_init: |-
      import jenkins.model.Jenkins
      import hudson.plugins.git.*;
      def scm = new GitSCM("https://github.com/pincher95/crud-application-using-flask-and-mysql.git")
      scm.branches = [new BranchSpec("*/master")];
      def flowDefinition = new org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition(scm, "Jenkinsfile")
      def parent = Jenkins.instance
      def job = new org.jenkinsci.plugins.workflow.job.WorkflowJob(parent, "OpsSchool-Project")
      job.definition = flowDefinition
      Jenkins.get().add(job, job.name);
    dockerCred: |-
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.domains.Domain
      import com.cloudbees.plugins.credentials.impl.*
      import hudson.util.Secret
      import jenkins.model.Jenkins

      // parameters
      def jenkinsKeyUsernameWithPasswordParameters = [
        description:  'Access to DockerHub (user: pincher95)',
        id:           'dockerhub.pincher95',
        secret:       '<Docker Hub pass goes her>',
        userName:     '<Docker Hub user goes her>'
      ]

      // get Jenkins instance
      Jenkins jenkins = Jenkins.getInstance()

      // get credentials domain
      def domain = Domain.global()

      // get credentials store
      def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      // define Bitbucket secret
      def jenkinsKeyUsernameWithPassword = new UsernamePasswordCredentialsImpl(
        CredentialsScope.GLOBAL,
        jenkinsKeyUsernameWithPasswordParameters.id,
        jenkinsKeyUsernameWithPasswordParameters.description,
        jenkinsKeyUsernameWithPasswordParameters.userName,
        jenkinsKeyUsernameWithPasswordParameters.secret
      )

      // add credential to store
      store.addCredentials(domain, jenkinsKeyUsernameWithPassword)

      // save to disk
      jenkins.save()

  # Enable to always override the installed plugins with the values of 'master.installPlugins' on upgrade or redeployment.
  overwritePlugins: true

  prometheus:
    enabled: true
    serviceMonitorNamespace: kube-metrics
    scrapeEndpoint: /prometheus
#    serviceMonitorAdditionalLabels: {
#    app: jenkins }
#    release: prometheus-operator }

agent:
  enabled: true

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass:
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "8Gi"
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

serviceAccountAgent:
  create: true

checkDeprecation: true

